/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TimedLeg: {
            legBoard: {
                stopPointRef: string;
                stopPointName: {
                    text: string;
                };
                nameSuffix?: {
                    text: string;
                };
                plannedQuay?: {
                    text: string;
                };
                estimatedQuay?: {
                    text: string;
                };
                serviceArrival?: {
                    timetabledTime: string;
                    estimatedTime?: string;
                };
                serviceDeparture: {
                    timetabledTime: string;
                    estimatedTime?: string;
                };
                order?: number;
                requestStop?: boolean;
                unplannedStop?: boolean;
                notServicedStop?: boolean;
                noBoardingAtStop?: boolean;
                noAlightingAtStop?: boolean;
            };
            legIntermediates: {
                stopPointRef: string;
                stopPointName: {
                    text: string;
                };
                nameSuffix?: {
                    text: string;
                };
                plannedQuay?: {
                    text: string;
                };
                estimatedQuay?: {
                    text: string;
                };
                serviceArrival: {
                    timetabledTime: string;
                    estimatedTime?: string;
                };
                serviceDeparture: {
                    timetabledTime: string;
                    estimatedTime?: string;
                };
                order?: number;
                requestStop?: boolean;
                unplannedStop?: boolean;
                notServicedStop?: boolean;
                noBoardingAtStop?: boolean;
                noAlightingAtStop?: boolean;
            }[];
            legAlight: {
                stopPointRef: string;
                stopPointName: {
                    text: string;
                };
                nameSuffix?: {
                    text: string;
                };
                plannedQuay?: {
                    text: string;
                };
                estimatedQuay?: {
                    text: string;
                };
                serviceArrival: {
                    timetabledTime: string;
                    estimatedTime?: string;
                };
                serviceDeparture?: {
                    timetabledTime: string;
                    estimatedTime?: string;
                };
                order?: number;
                requestStop?: boolean;
                unplannedStop?: boolean;
                notServicedStop?: boolean;
                noBoardingAtStop?: boolean;
                noAlightingAtStop?: boolean;
            };
            service: {
                conventionalModeOfOperation?: string;
                operatingDayRef: string;
                journeyRef: string;
                publicCode?: string;
                lineRef: string;
                directionRef?: string;
                mode: {
                    /** @enum {string} */
                    ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "other" | "unknown";
                    airSubmode?: string;
                    busSubmode?: string;
                    coachSubmode?: string;
                    funicularSubmode?: string;
                    metroSubmode?: string;
                    tramSubmode?: string;
                    telecabinSubmode?: string;
                    railSubmode?: string;
                    waterSubmode?: string;
                    name?: {
                        text: string;
                    };
                    shortName?: {
                        text: string;
                    };
                };
                productCategory?: {
                    name?: {
                        text: string;
                    };
                    shortName?: {
                        text: string;
                    };
                    productCategoryRef?: string;
                };
                publishedLineName: {
                    text: string;
                };
                trainNumber?: string;
                attribute: {
                    userText: {
                        text: string;
                    };
                    code: string;
                }[];
                operatorRef?: string;
                destinationStopPointRef?: string;
                destinationText?: {
                    text: string;
                };
                unplanned?: boolean;
                cancelled?: boolean;
                deviation?: boolean;
            };
            legTrack?: {
                trackSection: {
                    trackSectionStart?: {
                        stopPointRef?: string;
                        stopPlaceRef?: string;
                        geoPosition?: {
                            longitude: number;
                            latitude: number;
                        };
                        name: {
                            text: string;
                        };
                    };
                    trackSectionEnd?: {
                        stopPointRef?: string;
                        stopPlaceRef?: string;
                        geoPosition?: {
                            longitude: number;
                            latitude: number;
                        };
                        name: {
                            text: string;
                        };
                    };
                    linkProjection?: {
                        position: {
                            longitude: number;
                            latitude: number;
                        }[];
                    };
                };
            };
        };
        TripLeg: {
            legId: string;
            duration?: string;
            timedLeg?: {
                legBoard: {
                    stopPointRef: string;
                    stopPointName: {
                        text: string;
                    };
                    nameSuffix?: {
                        text: string;
                    };
                    plannedQuay?: {
                        text: string;
                    };
                    estimatedQuay?: {
                        text: string;
                    };
                    serviceArrival?: {
                        timetabledTime: string;
                        estimatedTime?: string;
                    };
                    serviceDeparture: {
                        timetabledTime: string;
                        estimatedTime?: string;
                    };
                    order?: number;
                    requestStop?: boolean;
                    unplannedStop?: boolean;
                    notServicedStop?: boolean;
                    noBoardingAtStop?: boolean;
                    noAlightingAtStop?: boolean;
                };
                legIntermediates: {
                    stopPointRef: string;
                    stopPointName: {
                        text: string;
                    };
                    nameSuffix?: {
                        text: string;
                    };
                    plannedQuay?: {
                        text: string;
                    };
                    estimatedQuay?: {
                        text: string;
                    };
                    serviceArrival: {
                        timetabledTime: string;
                        estimatedTime?: string;
                    };
                    serviceDeparture: {
                        timetabledTime: string;
                        estimatedTime?: string;
                    };
                    order?: number;
                    requestStop?: boolean;
                    unplannedStop?: boolean;
                    notServicedStop?: boolean;
                    noBoardingAtStop?: boolean;
                    noAlightingAtStop?: boolean;
                }[];
                legAlight: {
                    stopPointRef: string;
                    stopPointName: {
                        text: string;
                    };
                    nameSuffix?: {
                        text: string;
                    };
                    plannedQuay?: {
                        text: string;
                    };
                    estimatedQuay?: {
                        text: string;
                    };
                    serviceArrival: {
                        timetabledTime: string;
                        estimatedTime?: string;
                    };
                    serviceDeparture?: {
                        timetabledTime: string;
                        estimatedTime?: string;
                    };
                    order?: number;
                    requestStop?: boolean;
                    unplannedStop?: boolean;
                    notServicedStop?: boolean;
                    noBoardingAtStop?: boolean;
                    noAlightingAtStop?: boolean;
                };
                service: {
                    conventionalModeOfOperation?: string;
                    operatingDayRef: string;
                    journeyRef: string;
                    publicCode?: string;
                    lineRef: string;
                    directionRef?: string;
                    mode: {
                        /** @enum {string} */
                        ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "other" | "unknown";
                        airSubmode?: string;
                        busSubmode?: string;
                        coachSubmode?: string;
                        funicularSubmode?: string;
                        metroSubmode?: string;
                        tramSubmode?: string;
                        telecabinSubmode?: string;
                        railSubmode?: string;
                        waterSubmode?: string;
                        name?: {
                            text: string;
                        };
                        shortName?: {
                            text: string;
                        };
                    };
                    productCategory?: {
                        name?: {
                            text: string;
                        };
                        shortName?: {
                            text: string;
                        };
                        productCategoryRef?: string;
                    };
                    publishedLineName: {
                        text: string;
                    };
                    trainNumber?: string;
                    attribute: {
                        userText: {
                            text: string;
                        };
                        code: string;
                    }[];
                    operatorRef?: string;
                    destinationStopPointRef?: string;
                    destinationText?: {
                        text: string;
                    };
                    unplanned?: boolean;
                    cancelled?: boolean;
                    deviation?: boolean;
                };
                legTrack?: {
                    trackSection: {
                        trackSectionStart?: {
                            stopPointRef?: string;
                            stopPlaceRef?: string;
                            geoPosition?: {
                                longitude: number;
                                latitude: number;
                            };
                            name: {
                                text: string;
                            };
                        };
                        trackSectionEnd?: {
                            stopPointRef?: string;
                            stopPlaceRef?: string;
                            geoPosition?: {
                                longitude: number;
                                latitude: number;
                            };
                            name: {
                                text: string;
                            };
                        };
                        linkProjection?: {
                            position: {
                                longitude: number;
                                latitude: number;
                            }[];
                        };
                    };
                };
            };
            transferLeg?: {
                /** @enum {string} */
                transferType: "walk" | "remainInVehicle";
                legStart: {
                    stopPointRef?: string;
                    stopPlaceRef?: string;
                    geoPosition?: {
                        longitude: number;
                        latitude: number;
                    };
                    name: {
                        text: string;
                    };
                };
                legEnd: {
                    stopPointRef?: string;
                    stopPlaceRef?: string;
                    geoPosition?: {
                        longitude: number;
                        latitude: number;
                    };
                    name: {
                        text: string;
                    };
                };
                duration: string;
            };
            continuousLeg?: {
                legStart: {
                    stopPointRef?: string;
                    stopPlaceRef?: string;
                    geoPosition?: {
                        longitude: number;
                        latitude: number;
                    };
                    name: {
                        text: string;
                    };
                };
                legEnd: {
                    stopPointRef?: string;
                    stopPlaceRef?: string;
                    geoPosition?: {
                        longitude: number;
                        latitude: number;
                    };
                    name: {
                        text: string;
                    };
                };
                service: {
                    personalModeOfOperation?: string;
                    personalMode?: string;
                };
                duration: string;
            };
        };
        Trip: {
            tripId: string;
            duration: string;
            /** Format: date-time */
            startTime: string;
            /** Format: date-time */
            endTime: string;
            transfers: number;
            tripLeg: {
                legId: string;
                duration?: string;
                timedLeg?: {
                    legBoard: {
                        stopPointRef: string;
                        stopPointName: {
                            text: string;
                        };
                        nameSuffix?: {
                            text: string;
                        };
                        plannedQuay?: {
                            text: string;
                        };
                        estimatedQuay?: {
                            text: string;
                        };
                        serviceArrival?: {
                            timetabledTime: string;
                            estimatedTime?: string;
                        };
                        serviceDeparture: {
                            timetabledTime: string;
                            estimatedTime?: string;
                        };
                        order?: number;
                        requestStop?: boolean;
                        unplannedStop?: boolean;
                        notServicedStop?: boolean;
                        noBoardingAtStop?: boolean;
                        noAlightingAtStop?: boolean;
                    };
                    legIntermediates: {
                        stopPointRef: string;
                        stopPointName: {
                            text: string;
                        };
                        nameSuffix?: {
                            text: string;
                        };
                        plannedQuay?: {
                            text: string;
                        };
                        estimatedQuay?: {
                            text: string;
                        };
                        serviceArrival: {
                            timetabledTime: string;
                            estimatedTime?: string;
                        };
                        serviceDeparture: {
                            timetabledTime: string;
                            estimatedTime?: string;
                        };
                        order?: number;
                        requestStop?: boolean;
                        unplannedStop?: boolean;
                        notServicedStop?: boolean;
                        noBoardingAtStop?: boolean;
                        noAlightingAtStop?: boolean;
                    }[];
                    legAlight: {
                        stopPointRef: string;
                        stopPointName: {
                            text: string;
                        };
                        nameSuffix?: {
                            text: string;
                        };
                        plannedQuay?: {
                            text: string;
                        };
                        estimatedQuay?: {
                            text: string;
                        };
                        serviceArrival: {
                            timetabledTime: string;
                            estimatedTime?: string;
                        };
                        serviceDeparture?: {
                            timetabledTime: string;
                            estimatedTime?: string;
                        };
                        order?: number;
                        requestStop?: boolean;
                        unplannedStop?: boolean;
                        notServicedStop?: boolean;
                        noBoardingAtStop?: boolean;
                        noAlightingAtStop?: boolean;
                    };
                    service: {
                        conventionalModeOfOperation?: string;
                        operatingDayRef: string;
                        journeyRef: string;
                        publicCode?: string;
                        lineRef: string;
                        directionRef?: string;
                        mode: {
                            /** @enum {string} */
                            ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "other" | "unknown";
                            airSubmode?: string;
                            busSubmode?: string;
                            coachSubmode?: string;
                            funicularSubmode?: string;
                            metroSubmode?: string;
                            tramSubmode?: string;
                            telecabinSubmode?: string;
                            railSubmode?: string;
                            waterSubmode?: string;
                            name?: {
                                text: string;
                            };
                            shortName?: {
                                text: string;
                            };
                        };
                        productCategory?: {
                            name?: {
                                text: string;
                            };
                            shortName?: {
                                text: string;
                            };
                            productCategoryRef?: string;
                        };
                        publishedLineName: {
                            text: string;
                        };
                        trainNumber?: string;
                        attribute: {
                            userText: {
                                text: string;
                            };
                            code: string;
                        }[];
                        operatorRef?: string;
                        destinationStopPointRef?: string;
                        destinationText?: {
                            text: string;
                        };
                        unplanned?: boolean;
                        cancelled?: boolean;
                        deviation?: boolean;
                    };
                    legTrack?: {
                        trackSection: {
                            trackSectionStart?: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                    longitude: number;
                                    latitude: number;
                                };
                                name: {
                                    text: string;
                                };
                            };
                            trackSectionEnd?: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                    longitude: number;
                                    latitude: number;
                                };
                                name: {
                                    text: string;
                                };
                            };
                            linkProjection?: {
                                position: {
                                    longitude: number;
                                    latitude: number;
                                }[];
                            };
                        };
                    };
                };
                transferLeg?: {
                    /** @enum {string} */
                    transferType: "walk" | "remainInVehicle";
                    legStart: {
                        stopPointRef?: string;
                        stopPlaceRef?: string;
                        geoPosition?: {
                            longitude: number;
                            latitude: number;
                        };
                        name: {
                            text: string;
                        };
                    };
                    legEnd: {
                        stopPointRef?: string;
                        stopPlaceRef?: string;
                        geoPosition?: {
                            longitude: number;
                            latitude: number;
                        };
                        name: {
                            text: string;
                        };
                    };
                    duration: string;
                };
                continuousLeg?: {
                    legStart: {
                        stopPointRef?: string;
                        stopPlaceRef?: string;
                        geoPosition?: {
                            longitude: number;
                            latitude: number;
                        };
                        name: {
                            text: string;
                        };
                    };
                    legEnd: {
                        stopPointRef?: string;
                        stopPlaceRef?: string;
                        geoPosition?: {
                            longitude: number;
                            latitude: number;
                        };
                        name: {
                            text: string;
                        };
                    };
                    service: {
                        personalModeOfOperation?: string;
                        personalMode?: string;
                    };
                    duration: string;
                };
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
