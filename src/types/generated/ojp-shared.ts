/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        VehicleModesOfTransportEnum: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
        /** @enum {string} */
        UseRealtimeDataEnum: "full" | "explanatory" | "none";
        /** @enum {string} */
        PlaceTypeEnum: "stop" | "address" | "poi" | "location" | "topographicPlace";
        /** @enum {string} */
        SituationSourceTypeEnum: "directReport" | "email" | "phone" | "fax" | "post" | "feed" | "radio" | "tv" | "web" | "pager" | "text" | "other";
        /** @enum {string} */
        PerspectiveEnum: "general" | "stopPoint" | "vehicleJourney";
        InternationalText: {
            text: string;
        };
        GeoPosition: {
            longitude: number;
            latitude: number;
        };
        PlaceRef: {
            stopPointRef?: string;
            stopPlaceRef?: string;
            geoPosition?: {
                longitude: number;
                latitude: number;
            };
            name: {
                text: string;
            };
        };
        PlaceContext: {
            placeRef: {
                stopPointRef?: string;
                stopPlaceRef?: string;
                geoPosition?: {
                    longitude: number;
                    latitude: number;
                };
                name: {
                    text: string;
                };
            };
            depArrTime?: string;
        };
        ServiceRequestContext: {
            language?: string;
        };
        PointOfInterestCategory: {
            osmTag?: {
                tag: string;
                value: string;
            };
        };
        StopPoint: {
            stopPointRef: string;
            stopPointName: {
                text: string;
            };
            parentRef?: string;
            plannedQuay?: {
                text: string;
            };
            estimatedQuay?: {
                text: string;
            };
        };
        StopPlace: {
            stopPlaceRef?: string;
            stopPlaceName?: {
                text: string;
            };
        };
        TopographicPlace: {
            topographicPlaceCode: string;
            topographicPlaceName: {
                text: string;
            };
        };
        PointOfInterest: {
            publicCode: string;
            name: {
                text: string;
            };
            pointOfInterestCategory: {
                osmTag?: {
                    tag: string;
                    value: string;
                };
            }[];
            topographicPlaceRef?: string;
        };
        Address: {
            publicCode: string;
            name: {
                text: string;
            };
            postCode?: string;
            topographicPlaceName?: string;
            TopographicPlaceRef?: string;
            Street?: string;
            HouseNumber?: string;
        };
        ModeStructure: {
            /** @enum {string} */
            ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
            airSubmode?: string;
            busSubmode?: string;
            coachSubmode?: string;
            funicularSubmode?: string;
            metroSubmode?: string;
            tramSubmode?: string;
            telecabinSubmode?: string;
            railSubmode?: string;
            waterSubmode?: string;
            name?: {
                text: string;
            };
            shortName?: {
                text: string;
            };
        };
        Place: {
            stopPoint?: {
                stopPointRef: string;
                stopPointName: {
                    text: string;
                };
                parentRef?: string;
                plannedQuay?: {
                    text: string;
                };
                estimatedQuay?: {
                    text: string;
                };
            };
            stopPlace?: {
                stopPlaceRef?: string;
                stopPlaceName?: {
                    text: string;
                };
            };
            topographicPlace?: {
                topographicPlaceCode: string;
                topographicPlaceName: {
                    text: string;
                };
            };
            pointOfInterest?: {
                publicCode: string;
                name: {
                    text: string;
                };
                pointOfInterestCategory: {
                    osmTag?: {
                        tag: string;
                        value: string;
                    };
                }[];
                topographicPlaceRef?: string;
            };
            address?: {
                publicCode: string;
                name: {
                    text: string;
                };
                postCode?: string;
                topographicPlaceName?: string;
                TopographicPlaceRef?: string;
                Street?: string;
                HouseNumber?: string;
            };
            name: {
                text: string;
            };
            geoPosition: {
                longitude: number;
                latitude: number;
            };
            mode: {
                /** @enum {string} */
                ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                airSubmode?: string;
                busSubmode?: string;
                coachSubmode?: string;
                funicularSubmode?: string;
                metroSubmode?: string;
                tramSubmode?: string;
                telecabinSubmode?: string;
                railSubmode?: string;
                waterSubmode?: string;
                name?: {
                    text: string;
                };
                shortName?: {
                    text: string;
                };
            }[];
        };
        TextualContentStructure: {
            summaryContent: {
                summaryText: string;
            };
            reasonContent?: {
                reasonText: string;
            };
            descriptionContent: {
                descriptionText: string;
            }[];
            consequenceContent: {
                consequenceText: string;
            }[];
            recommendationContent: {
                recommendationText: string;
            }[];
            durationContent?: {
                durationText: string;
            };
            remarkContent: {
                remark: string;
            }[];
            infoLink: {
                uri: string;
                label?: string[];
            }[];
        };
        PassengerInformationActionStructure: {
            actionRef: string;
            recordedAtTime: string;
            /** @enum {string} */
            perspective: "general" | "stopPoint" | "vehicleJourney";
            textualContent: {
                summaryContent: {
                    summaryText: string;
                };
                reasonContent?: {
                    reasonText: string;
                };
                descriptionContent: {
                    descriptionText: string;
                }[];
                consequenceContent: {
                    consequenceText: string;
                }[];
                recommendationContent: {
                    recommendationText: string;
                }[];
                durationContent?: {
                    durationText: string;
                };
                remarkContent: {
                    remark: string;
                }[];
                infoLink: {
                    uri: string;
                    label?: string[];
                }[];
            }[];
        };
        ActionsStructure: {
            publishAtScope: {
                scopeType: string;
            };
            passengerInformationAction: {
                actionRef: string;
                recordedAtTime: string;
                /** @enum {string} */
                perspective: "general" | "stopPoint" | "vehicleJourney";
                textualContent: {
                    summaryContent: {
                        summaryText: string;
                    };
                    reasonContent?: {
                        reasonText: string;
                    };
                    descriptionContent: {
                        descriptionText: string;
                    }[];
                    consequenceContent: {
                        consequenceText: string;
                    }[];
                    recommendationContent: {
                        recommendationText: string;
                    }[];
                    durationContent?: {
                        durationText: string;
                    };
                    remarkContent: {
                        remark: string;
                    }[];
                    infoLink: {
                        uri: string;
                        label?: string[];
                    }[];
                }[];
            }[];
        };
        PtSituationElementStructure: {
            creationTime: string;
            participantRef?: string;
            situationNumber: string;
            version?: number;
            source: {
                /** @enum {string} */
                sourceType: "directReport" | "email" | "phone" | "fax" | "post" | "feed" | "radio" | "tv" | "web" | "pager" | "text" | "other";
            };
            validityPeriod: {
                startTime: string;
                endTime?: string;
            }[];
            alertCause: string;
            priority?: string;
            scopeType?: string;
            publishingActions?: {
                publishingAction: {
                    publishAtScope: {
                        scopeType: string;
                    };
                    passengerInformationAction: {
                        actionRef: string;
                        recordedAtTime: string;
                        /** @enum {string} */
                        perspective: "general" | "stopPoint" | "vehicleJourney";
                        textualContent: {
                            summaryContent: {
                                summaryText: string;
                            };
                            reasonContent?: {
                                reasonText: string;
                            };
                            descriptionContent: {
                                descriptionText: string;
                            }[];
                            consequenceContent: {
                                consequenceText: string;
                            }[];
                            recommendationContent: {
                                recommendationText: string;
                            }[];
                            durationContent?: {
                                durationText: string;
                            };
                            remarkContent: {
                                remark: string;
                            }[];
                            infoLink: {
                                uri: string;
                                label?: string[];
                            }[];
                        }[];
                    }[];
                }[];
            };
        };
        SharedServiceArrivalDeparture: {
            timetabledTime: string;
            estimatedTime?: string;
        };
        CallAtStop: {
            stopPointRef: string;
            stopPointName: {
                text: string;
            };
            nameSuffix?: {
                text: string;
            };
            plannedQuay?: {
                text: string;
            };
            estimatedQuay?: {
                text: string;
            };
            serviceArrival?: {
                timetabledTime: string;
                estimatedTime?: string;
            };
            serviceDeparture?: {
                timetabledTime: string;
                estimatedTime?: string;
            };
            order?: number;
            requestStop?: boolean;
            unplannedStop?: boolean;
            notServicedStop?: boolean;
            noBoardingAtStop?: boolean;
            noAlightingAtStop?: boolean;
        };
        ProductCategory: {
            name?: {
                text: string;
            };
            shortName?: {
                text: string;
            };
            productCategoryRef?: string;
        };
        GeneralAttribute: {
            userText: {
                text: string;
            };
            code: string;
        };
        SituationFullRefStructure: {
            participantRef: string;
            situationNumber: string;
        };
        DatedJourney: {
            conventionalModeOfOperation?: string;
            operatingDayRef: string;
            journeyRef: string;
            publicCode?: string;
            lineRef: string;
            directionRef?: string;
            mode: {
                /** @enum {string} */
                ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                airSubmode?: string;
                busSubmode?: string;
                coachSubmode?: string;
                funicularSubmode?: string;
                metroSubmode?: string;
                tramSubmode?: string;
                telecabinSubmode?: string;
                railSubmode?: string;
                waterSubmode?: string;
                name?: {
                    text: string;
                };
                shortName?: {
                    text: string;
                };
            };
            productCategory?: {
                name?: {
                    text: string;
                };
                shortName?: {
                    text: string;
                };
                productCategoryRef?: string;
            };
            publishedServiceName: {
                text: string;
            };
            trainNumber?: string;
            attribute: {
                userText: {
                    text: string;
                };
                code: string;
            }[];
            operatorRef?: string;
            destinationStopPointRef?: string;
            destinationText?: {
                text: string;
            };
            unplanned?: boolean;
            cancelled?: boolean;
            deviation?: boolean;
            situationFullRefs?: {
                situationFullRef: {
                    participantRef: string;
                    situationNumber: string;
                }[];
            };
        };
        ResponseContextStructure: {
            places?: {
                place: {
                    stopPoint?: {
                        stopPointRef: string;
                        stopPointName: {
                            text: string;
                        };
                        parentRef?: string;
                        plannedQuay?: {
                            text: string;
                        };
                        estimatedQuay?: {
                            text: string;
                        };
                    };
                    stopPlace?: {
                        stopPlaceRef?: string;
                        stopPlaceName?: {
                            text: string;
                        };
                    };
                    topographicPlace?: {
                        topographicPlaceCode: string;
                        topographicPlaceName: {
                            text: string;
                        };
                    };
                    pointOfInterest?: {
                        publicCode: string;
                        name: {
                            text: string;
                        };
                        pointOfInterestCategory: {
                            osmTag?: {
                                tag: string;
                                value: string;
                            };
                        }[];
                        topographicPlaceRef?: string;
                    };
                    address?: {
                        publicCode: string;
                        name: {
                            text: string;
                        };
                        postCode?: string;
                        topographicPlaceName?: string;
                        TopographicPlaceRef?: string;
                        Street?: string;
                        HouseNumber?: string;
                    };
                    name: {
                        text: string;
                    };
                    geoPosition: {
                        longitude: number;
                        latitude: number;
                    };
                    mode: {
                        /** @enum {string} */
                        ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                        airSubmode?: string;
                        busSubmode?: string;
                        coachSubmode?: string;
                        funicularSubmode?: string;
                        metroSubmode?: string;
                        tramSubmode?: string;
                        telecabinSubmode?: string;
                        railSubmode?: string;
                        waterSubmode?: string;
                        name?: {
                            text: string;
                        };
                        shortName?: {
                            text: string;
                        };
                    }[];
                }[];
            };
            situations?: {
                ptSituation: {
                    creationTime: string;
                    participantRef?: string;
                    situationNumber: string;
                    version?: number;
                    source: {
                        /** @enum {string} */
                        sourceType: "directReport" | "email" | "phone" | "fax" | "post" | "feed" | "radio" | "tv" | "web" | "pager" | "text" | "other";
                    };
                    validityPeriod: {
                        startTime: string;
                        endTime?: string;
                    }[];
                    alertCause: string;
                    priority?: string;
                    scopeType?: string;
                    publishingActions?: {
                        publishingAction: {
                            publishAtScope: {
                                scopeType: string;
                            };
                            passengerInformationAction: {
                                actionRef: string;
                                recordedAtTime: string;
                                /** @enum {string} */
                                perspective: "general" | "stopPoint" | "vehicleJourney";
                                textualContent: {
                                    summaryContent: {
                                        summaryText: string;
                                    };
                                    reasonContent?: {
                                        reasonText: string;
                                    };
                                    descriptionContent: {
                                        descriptionText: string;
                                    }[];
                                    consequenceContent: {
                                        consequenceText: string;
                                    }[];
                                    recommendationContent: {
                                        recommendationText: string;
                                    }[];
                                    durationContent?: {
                                        durationText: string;
                                    };
                                    remarkContent: {
                                        remark: string;
                                    }[];
                                    infoLink: {
                                        uri: string;
                                        label?: string[];
                                    }[];
                                }[];
                            }[];
                        }[];
                    };
                }[];
            };
        };
        LinkProjection: {
            position: {
                longitude: number;
                latitude: number;
            }[];
        };
        TrackSectionStructure: {
            trackSectionStart?: {
                stopPointRef?: string;
                stopPlaceRef?: string;
                geoPosition?: {
                    longitude: number;
                    latitude: number;
                };
                name: {
                    text: string;
                };
            };
            trackSectionEnd?: {
                stopPointRef?: string;
                stopPlaceRef?: string;
                geoPosition?: {
                    longitude: number;
                    latitude: number;
                };
                name: {
                    text: string;
                };
            };
            linkProjection?: {
                position: {
                    longitude: number;
                    latitude: number;
                }[];
            };
        };
        ModeFilterStructure: {
            exclude?: boolean;
            ptMode?: ("air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown")[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
