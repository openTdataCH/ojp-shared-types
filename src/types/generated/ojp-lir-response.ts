/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ojp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Main /ojp endpoint
         * @description Main /ojp endpoint
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": {
                            OJPResponse: {
                                serviceDelivery: {
                                    responseTimestamp: string;
                                    producerRef: string;
                                    OJPLocationInformationDelivery: {
                                        responseTimestamp: string;
                                        requestMessageRef?: string;
                                        defaultLanguage?: string;
                                        calcTime?: string;
                                        placeResult: {
                                            place: {
                                                stopPoint?: {
                                                    stopPointRef: string;
                                                    stopPointName: {
                                                        text: string;
                                                    };
                                                    parentRef?: string;
                                                    plannedQuay?: {
                                                        text: string;
                                                    };
                                                    estimatedQuay?: {
                                                        text: string;
                                                    };
                                                };
                                                stopPlace?: {
                                                    stopPlaceRef?: string;
                                                    stopPlaceName?: {
                                                        text: string;
                                                    };
                                                };
                                                topographicPlace?: {
                                                    topographicPlaceCode: string;
                                                    topographicPlaceName: {
                                                        text: string;
                                                    };
                                                };
                                                pointOfInterest?: {
                                                    publicCode: string;
                                                    name: {
                                                        text: string;
                                                    };
                                                    pointOfInterestCategory: {
                                                        osmTag?: {
                                                            tag: string;
                                                            value: string;
                                                        };
                                                    }[];
                                                    topographicPlaceRef?: string;
                                                };
                                                address?: {
                                                    publicCode: string;
                                                    name: {
                                                        text: string;
                                                    };
                                                    postCode?: string;
                                                    topographicPlaceName?: string;
                                                    TopographicPlaceRef?: string;
                                                    Street?: string;
                                                    HouseNumber?: string;
                                                };
                                                name: {
                                                    text: string;
                                                };
                                                geoPosition: {
                                                    longitude: number;
                                                    latitude: number;
                                                };
                                                mode: {
                                                    /** @enum {string} */
                                                    ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                                                    airSubmode?: string;
                                                    busSubmode?: string;
                                                    coachSubmode?: string;
                                                    funicularSubmode?: string;
                                                    metroSubmode?: string;
                                                    tramSubmode?: string;
                                                    telecabinSubmode?: string;
                                                    railSubmode?: string;
                                                    waterSubmode?: string;
                                                    name?: {
                                                        text: string;
                                                    };
                                                    shortName?: {
                                                        text: string;
                                                    };
                                                }[];
                                            };
                                            complete: boolean;
                                            probability?: number;
                                        }[];
                                    };
                                };
                            };
                        };
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PlaceResult: {
            place: {
                stopPoint?: {
                    stopPointRef: string;
                    stopPointName: {
                        text: string;
                    };
                    parentRef?: string;
                    plannedQuay?: {
                        text: string;
                    };
                    estimatedQuay?: {
                        text: string;
                    };
                };
                stopPlace?: {
                    stopPlaceRef?: string;
                    stopPlaceName?: {
                        text: string;
                    };
                };
                topographicPlace?: {
                    topographicPlaceCode: string;
                    topographicPlaceName: {
                        text: string;
                    };
                };
                pointOfInterest?: {
                    publicCode: string;
                    name: {
                        text: string;
                    };
                    pointOfInterestCategory: {
                        osmTag?: {
                            tag: string;
                            value: string;
                        };
                    }[];
                    topographicPlaceRef?: string;
                };
                address?: {
                    publicCode: string;
                    name: {
                        text: string;
                    };
                    postCode?: string;
                    topographicPlaceName?: string;
                    TopographicPlaceRef?: string;
                    Street?: string;
                    HouseNumber?: string;
                };
                name: {
                    text: string;
                };
                geoPosition: {
                    longitude: number;
                    latitude: number;
                };
                mode: {
                    /** @enum {string} */
                    ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                    airSubmode?: string;
                    busSubmode?: string;
                    coachSubmode?: string;
                    funicularSubmode?: string;
                    metroSubmode?: string;
                    tramSubmode?: string;
                    telecabinSubmode?: string;
                    railSubmode?: string;
                    waterSubmode?: string;
                    name?: {
                        text: string;
                    };
                    shortName?: {
                        text: string;
                    };
                }[];
            };
            complete: boolean;
            probability?: number;
        };
        OJPLocationInformationDelivery: {
            responseTimestamp: string;
            requestMessageRef?: string;
            defaultLanguage?: string;
            calcTime?: string;
            placeResult: {
                place: {
                    stopPoint?: {
                        stopPointRef: string;
                        stopPointName: {
                            text: string;
                        };
                        parentRef?: string;
                        plannedQuay?: {
                            text: string;
                        };
                        estimatedQuay?: {
                            text: string;
                        };
                    };
                    stopPlace?: {
                        stopPlaceRef?: string;
                        stopPlaceName?: {
                            text: string;
                        };
                    };
                    topographicPlace?: {
                        topographicPlaceCode: string;
                        topographicPlaceName: {
                            text: string;
                        };
                    };
                    pointOfInterest?: {
                        publicCode: string;
                        name: {
                            text: string;
                        };
                        pointOfInterestCategory: {
                            osmTag?: {
                                tag: string;
                                value: string;
                            };
                        }[];
                        topographicPlaceRef?: string;
                    };
                    address?: {
                        publicCode: string;
                        name: {
                            text: string;
                        };
                        postCode?: string;
                        topographicPlaceName?: string;
                        TopographicPlaceRef?: string;
                        Street?: string;
                        HouseNumber?: string;
                    };
                    name: {
                        text: string;
                    };
                    geoPosition: {
                        longitude: number;
                        latitude: number;
                    };
                    mode: {
                        /** @enum {string} */
                        ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                        airSubmode?: string;
                        busSubmode?: string;
                        coachSubmode?: string;
                        funicularSubmode?: string;
                        metroSubmode?: string;
                        tramSubmode?: string;
                        telecabinSubmode?: string;
                        railSubmode?: string;
                        waterSubmode?: string;
                        name?: {
                            text: string;
                        };
                        shortName?: {
                            text: string;
                        };
                    }[];
                };
                complete: boolean;
                probability?: number;
            }[];
        };
        OJP: {
            OJPResponse: {
                serviceDelivery: {
                    responseTimestamp: string;
                    producerRef: string;
                    OJPLocationInformationDelivery: {
                        responseTimestamp: string;
                        requestMessageRef?: string;
                        defaultLanguage?: string;
                        calcTime?: string;
                        placeResult: {
                            place: {
                                stopPoint?: {
                                    stopPointRef: string;
                                    stopPointName: {
                                        text: string;
                                    };
                                    parentRef?: string;
                                    plannedQuay?: {
                                        text: string;
                                    };
                                    estimatedQuay?: {
                                        text: string;
                                    };
                                };
                                stopPlace?: {
                                    stopPlaceRef?: string;
                                    stopPlaceName?: {
                                        text: string;
                                    };
                                };
                                topographicPlace?: {
                                    topographicPlaceCode: string;
                                    topographicPlaceName: {
                                        text: string;
                                    };
                                };
                                pointOfInterest?: {
                                    publicCode: string;
                                    name: {
                                        text: string;
                                    };
                                    pointOfInterestCategory: {
                                        osmTag?: {
                                            tag: string;
                                            value: string;
                                        };
                                    }[];
                                    topographicPlaceRef?: string;
                                };
                                address?: {
                                    publicCode: string;
                                    name: {
                                        text: string;
                                    };
                                    postCode?: string;
                                    topographicPlaceName?: string;
                                    TopographicPlaceRef?: string;
                                    Street?: string;
                                    HouseNumber?: string;
                                };
                                name: {
                                    text: string;
                                };
                                geoPosition: {
                                    longitude: number;
                                    latitude: number;
                                };
                                mode: {
                                    /** @enum {string} */
                                    ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                                    airSubmode?: string;
                                    busSubmode?: string;
                                    coachSubmode?: string;
                                    funicularSubmode?: string;
                                    metroSubmode?: string;
                                    tramSubmode?: string;
                                    telecabinSubmode?: string;
                                    railSubmode?: string;
                                    waterSubmode?: string;
                                    name?: {
                                        text: string;
                                    };
                                    shortName?: {
                                        text: string;
                                    };
                                }[];
                            };
                            complete: boolean;
                            probability?: number;
                        }[];
                    };
                };
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
