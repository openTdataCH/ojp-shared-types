/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ojp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Main /ojp endpoint
         * @description Main /ojp endpoint
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": {
                            OJPResponse: {
                                serviceDelivery: {
                                    responseTimestamp: string;
                                    producerRef: string;
                                    OJPTripInfoDelivery: {
                                        responseTimestamp: string;
                                        requestMessageRef?: string;
                                        defaultLanguage?: string;
                                        calcTime?: string;
                                        tripInfoResponseContext?: {
                                            places?: {
                                                place: {
                                                    stopPoint?: {
                                                        stopPointRef: string;
                                                        stopPointName: {
                                                            text: string;
                                                        };
                                                        parentRef?: string;
                                                        plannedQuay?: {
                                                            text: string;
                                                        };
                                                        estimatedQuay?: {
                                                            text: string;
                                                        };
                                                    };
                                                    stopPlace?: {
                                                        stopPlaceRef?: string;
                                                        stopPlaceName?: {
                                                            text: string;
                                                        };
                                                    };
                                                    topographicPlace?: {
                                                        topographicPlaceCode: string;
                                                        topographicPlaceName: {
                                                            text: string;
                                                        };
                                                    };
                                                    pointOfInterest?: {
                                                        publicCode: string;
                                                        name: {
                                                            text: string;
                                                        };
                                                        pointOfInterestCategory: {
                                                            osmTag?: {
                                                                tag: string;
                                                                value: string;
                                                            };
                                                        }[];
                                                        topographicPlaceRef?: string;
                                                    };
                                                    address?: {
                                                        publicCode: string;
                                                        name: {
                                                            text: string;
                                                        };
                                                        postCode?: string;
                                                        topographicPlaceName?: string;
                                                        TopographicPlaceRef?: string;
                                                        Street?: string;
                                                        HouseNumber?: string;
                                                    };
                                                    name: {
                                                        text: string;
                                                    };
                                                    geoPosition: {
                                                        longitude: number;
                                                        latitude: number;
                                                    };
                                                    mode: {
                                                        /** @enum {string} */
                                                        ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                                                        airSubmode?: string;
                                                        busSubmode?: string;
                                                        coachSubmode?: string;
                                                        funicularSubmode?: string;
                                                        metroSubmode?: string;
                                                        tramSubmode?: string;
                                                        telecabinSubmode?: string;
                                                        railSubmode?: string;
                                                        waterSubmode?: string;
                                                        name?: {
                                                            text: string;
                                                        };
                                                        shortName?: {
                                                            text: string;
                                                        };
                                                    }[];
                                                }[];
                                            };
                                            situations?: {
                                                ptSituation: {
                                                    creationTime: string;
                                                    participantRef?: string;
                                                    situationNumber: string;
                                                    version?: number;
                                                    source: {
                                                        /** @enum {string} */
                                                        sourceType: "directReport" | "email" | "phone" | "fax" | "post" | "feed" | "radio" | "tv" | "web" | "pager" | "text" | "other";
                                                    };
                                                    validityPeriod: {
                                                        startTime: string;
                                                        endTime?: string;
                                                    }[];
                                                    alertCause: string;
                                                    priority?: string;
                                                    scopeType?: string;
                                                    publishingActions?: {
                                                        publishingAction: {
                                                            publishAtScope: {
                                                                scopeType: string;
                                                            };
                                                            passengerInformationAction: {
                                                                actionRef: string;
                                                                recordedAtTime: string;
                                                                /** @enum {string} */
                                                                perspective: "general" | "stopPoint" | "vehicleJourney";
                                                                textualContent: {
                                                                    summaryContent: {
                                                                        summaryText: string;
                                                                    };
                                                                    reasonContent?: {
                                                                        reasonText: string;
                                                                    };
                                                                    descriptionContent: {
                                                                        descriptionText: string;
                                                                    }[];
                                                                    consequenceContent: {
                                                                        consequenceText: string;
                                                                    }[];
                                                                    recommendationContent: {
                                                                        recommendationText: string;
                                                                    }[];
                                                                    durationContent?: {
                                                                        durationText: string;
                                                                    };
                                                                    remarkContent: {
                                                                        remark: string;
                                                                    }[];
                                                                    infoLink: {
                                                                        uri: string;
                                                                        label?: string[];
                                                                    }[];
                                                                }[];
                                                            }[];
                                                        }[];
                                                    };
                                                }[];
                                            };
                                        };
                                        tripInfoResult: {
                                            previousCall: {
                                                stopPointRef: string;
                                                stopPointName: {
                                                    text: string;
                                                };
                                                nameSuffix?: {
                                                    text: string;
                                                };
                                                plannedQuay?: {
                                                    text: string;
                                                };
                                                estimatedQuay?: {
                                                    text: string;
                                                };
                                                serviceArrival?: {
                                                    timetabledTime: string;
                                                    estimatedTime?: string;
                                                };
                                                serviceDeparture?: {
                                                    timetabledTime: string;
                                                    estimatedTime?: string;
                                                };
                                                expectedDepartureOccupancy?: {
                                                    /** @enum {string} */
                                                    fareClass: "unknown" | "firstClass" | "secondClass";
                                                    /** @enum {string} */
                                                    occupancyLevel: "empty" | "manySeatsAvailable" | "fewSeatsAvailable" | "standingRoomOnly";
                                                }[];
                                                order?: number;
                                                requestStop?: boolean;
                                                unplannedStop?: boolean;
                                                notServicedStop?: boolean;
                                                noBoardingAtStop?: boolean;
                                                noAlightingAtStop?: boolean;
                                            }[];
                                            onwardCall: {
                                                stopPointRef: string;
                                                stopPointName: {
                                                    text: string;
                                                };
                                                nameSuffix?: {
                                                    text: string;
                                                };
                                                plannedQuay?: {
                                                    text: string;
                                                };
                                                estimatedQuay?: {
                                                    text: string;
                                                };
                                                serviceArrival?: {
                                                    timetabledTime: string;
                                                    estimatedTime?: string;
                                                };
                                                serviceDeparture?: {
                                                    timetabledTime: string;
                                                    estimatedTime?: string;
                                                };
                                                expectedDepartureOccupancy?: {
                                                    /** @enum {string} */
                                                    fareClass: "unknown" | "firstClass" | "secondClass";
                                                    /** @enum {string} */
                                                    occupancyLevel: "empty" | "manySeatsAvailable" | "fewSeatsAvailable" | "standingRoomOnly";
                                                }[];
                                                order?: number;
                                                requestStop?: boolean;
                                                unplannedStop?: boolean;
                                                notServicedStop?: boolean;
                                                noBoardingAtStop?: boolean;
                                                noAlightingAtStop?: boolean;
                                            }[];
                                            service?: {
                                                conventionalModeOfOperation?: string;
                                                operatingDayRef: string;
                                                journeyRef: string;
                                                publicCode?: string;
                                                lineRef: string;
                                                directionRef?: string;
                                                mode: {
                                                    /** @enum {string} */
                                                    ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                                                    airSubmode?: string;
                                                    busSubmode?: string;
                                                    coachSubmode?: string;
                                                    funicularSubmode?: string;
                                                    metroSubmode?: string;
                                                    tramSubmode?: string;
                                                    telecabinSubmode?: string;
                                                    railSubmode?: string;
                                                    waterSubmode?: string;
                                                    name?: {
                                                        text: string;
                                                    };
                                                    shortName?: {
                                                        text: string;
                                                    };
                                                };
                                                productCategory?: {
                                                    name?: {
                                                        text: string;
                                                    };
                                                    shortName?: {
                                                        text: string;
                                                    };
                                                    productCategoryRef?: string;
                                                };
                                                publishedServiceName: {
                                                    text: string;
                                                };
                                                trainNumber?: string;
                                                attribute: {
                                                    userText: {
                                                        text: string;
                                                    };
                                                    code: string;
                                                }[];
                                                operatorRef?: string;
                                                destinationStopPointRef?: string;
                                                destinationText?: {
                                                    text: string;
                                                };
                                                unplanned?: boolean;
                                                cancelled?: boolean;
                                                deviation?: boolean;
                                                situationFullRefs?: {
                                                    situationFullRef: {
                                                        participantRef: string;
                                                        situationNumber: string;
                                                    }[];
                                                };
                                            };
                                            journeyTrack?: {
                                                trackSection: {
                                                    trackSectionStart?: {
                                                        stopPointRef?: string;
                                                        stopPlaceRef?: string;
                                                        geoPosition?: {
                                                            longitude: number;
                                                            latitude: number;
                                                        };
                                                        name: {
                                                            text: string;
                                                        };
                                                    };
                                                    trackSectionEnd?: {
                                                        stopPointRef?: string;
                                                        stopPlaceRef?: string;
                                                        geoPosition?: {
                                                            longitude: number;
                                                            latitude: number;
                                                        };
                                                        name: {
                                                            text: string;
                                                        };
                                                    };
                                                    linkProjection?: {
                                                        position: {
                                                            longitude: number;
                                                            latitude: number;
                                                        }[];
                                                    };
                                                }[];
                                            };
                                        }[];
                                    };
                                };
                            };
                        };
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TripInfoResultStructure: {
            previousCall: {
                stopPointRef: string;
                stopPointName: {
                    text: string;
                };
                nameSuffix?: {
                    text: string;
                };
                plannedQuay?: {
                    text: string;
                };
                estimatedQuay?: {
                    text: string;
                };
                serviceArrival?: {
                    timetabledTime: string;
                    estimatedTime?: string;
                };
                serviceDeparture?: {
                    timetabledTime: string;
                    estimatedTime?: string;
                };
                expectedDepartureOccupancy?: {
                    /** @enum {string} */
                    fareClass: "unknown" | "firstClass" | "secondClass";
                    /** @enum {string} */
                    occupancyLevel: "empty" | "manySeatsAvailable" | "fewSeatsAvailable" | "standingRoomOnly";
                }[];
                order?: number;
                requestStop?: boolean;
                unplannedStop?: boolean;
                notServicedStop?: boolean;
                noBoardingAtStop?: boolean;
                noAlightingAtStop?: boolean;
            }[];
            onwardCall: {
                stopPointRef: string;
                stopPointName: {
                    text: string;
                };
                nameSuffix?: {
                    text: string;
                };
                plannedQuay?: {
                    text: string;
                };
                estimatedQuay?: {
                    text: string;
                };
                serviceArrival?: {
                    timetabledTime: string;
                    estimatedTime?: string;
                };
                serviceDeparture?: {
                    timetabledTime: string;
                    estimatedTime?: string;
                };
                expectedDepartureOccupancy?: {
                    /** @enum {string} */
                    fareClass: "unknown" | "firstClass" | "secondClass";
                    /** @enum {string} */
                    occupancyLevel: "empty" | "manySeatsAvailable" | "fewSeatsAvailable" | "standingRoomOnly";
                }[];
                order?: number;
                requestStop?: boolean;
                unplannedStop?: boolean;
                notServicedStop?: boolean;
                noBoardingAtStop?: boolean;
                noAlightingAtStop?: boolean;
            }[];
            service?: {
                conventionalModeOfOperation?: string;
                operatingDayRef: string;
                journeyRef: string;
                publicCode?: string;
                lineRef: string;
                directionRef?: string;
                mode: {
                    /** @enum {string} */
                    ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                    airSubmode?: string;
                    busSubmode?: string;
                    coachSubmode?: string;
                    funicularSubmode?: string;
                    metroSubmode?: string;
                    tramSubmode?: string;
                    telecabinSubmode?: string;
                    railSubmode?: string;
                    waterSubmode?: string;
                    name?: {
                        text: string;
                    };
                    shortName?: {
                        text: string;
                    };
                };
                productCategory?: {
                    name?: {
                        text: string;
                    };
                    shortName?: {
                        text: string;
                    };
                    productCategoryRef?: string;
                };
                publishedServiceName: {
                    text: string;
                };
                trainNumber?: string;
                attribute: {
                    userText: {
                        text: string;
                    };
                    code: string;
                }[];
                operatorRef?: string;
                destinationStopPointRef?: string;
                destinationText?: {
                    text: string;
                };
                unplanned?: boolean;
                cancelled?: boolean;
                deviation?: boolean;
                situationFullRefs?: {
                    situationFullRef: {
                        participantRef: string;
                        situationNumber: string;
                    }[];
                };
            };
            journeyTrack?: {
                trackSection: {
                    trackSectionStart?: {
                        stopPointRef?: string;
                        stopPlaceRef?: string;
                        geoPosition?: {
                            longitude: number;
                            latitude: number;
                        };
                        name: {
                            text: string;
                        };
                    };
                    trackSectionEnd?: {
                        stopPointRef?: string;
                        stopPlaceRef?: string;
                        geoPosition?: {
                            longitude: number;
                            latitude: number;
                        };
                        name: {
                            text: string;
                        };
                    };
                    linkProjection?: {
                        position: {
                            longitude: number;
                            latitude: number;
                        }[];
                    };
                }[];
            };
        };
        OJPTripInfoDelivery: {
            responseTimestamp: string;
            requestMessageRef?: string;
            defaultLanguage?: string;
            calcTime?: string;
            tripInfoResponseContext?: {
                places?: {
                    place: {
                        stopPoint?: {
                            stopPointRef: string;
                            stopPointName: {
                                text: string;
                            };
                            parentRef?: string;
                            plannedQuay?: {
                                text: string;
                            };
                            estimatedQuay?: {
                                text: string;
                            };
                        };
                        stopPlace?: {
                            stopPlaceRef?: string;
                            stopPlaceName?: {
                                text: string;
                            };
                        };
                        topographicPlace?: {
                            topographicPlaceCode: string;
                            topographicPlaceName: {
                                text: string;
                            };
                        };
                        pointOfInterest?: {
                            publicCode: string;
                            name: {
                                text: string;
                            };
                            pointOfInterestCategory: {
                                osmTag?: {
                                    tag: string;
                                    value: string;
                                };
                            }[];
                            topographicPlaceRef?: string;
                        };
                        address?: {
                            publicCode: string;
                            name: {
                                text: string;
                            };
                            postCode?: string;
                            topographicPlaceName?: string;
                            TopographicPlaceRef?: string;
                            Street?: string;
                            HouseNumber?: string;
                        };
                        name: {
                            text: string;
                        };
                        geoPosition: {
                            longitude: number;
                            latitude: number;
                        };
                        mode: {
                            /** @enum {string} */
                            ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                            airSubmode?: string;
                            busSubmode?: string;
                            coachSubmode?: string;
                            funicularSubmode?: string;
                            metroSubmode?: string;
                            tramSubmode?: string;
                            telecabinSubmode?: string;
                            railSubmode?: string;
                            waterSubmode?: string;
                            name?: {
                                text: string;
                            };
                            shortName?: {
                                text: string;
                            };
                        }[];
                    }[];
                };
                situations?: {
                    ptSituation: {
                        creationTime: string;
                        participantRef?: string;
                        situationNumber: string;
                        version?: number;
                        source: {
                            /** @enum {string} */
                            sourceType: "directReport" | "email" | "phone" | "fax" | "post" | "feed" | "radio" | "tv" | "web" | "pager" | "text" | "other";
                        };
                        validityPeriod: {
                            startTime: string;
                            endTime?: string;
                        }[];
                        alertCause: string;
                        priority?: string;
                        scopeType?: string;
                        publishingActions?: {
                            publishingAction: {
                                publishAtScope: {
                                    scopeType: string;
                                };
                                passengerInformationAction: {
                                    actionRef: string;
                                    recordedAtTime: string;
                                    /** @enum {string} */
                                    perspective: "general" | "stopPoint" | "vehicleJourney";
                                    textualContent: {
                                        summaryContent: {
                                            summaryText: string;
                                        };
                                        reasonContent?: {
                                            reasonText: string;
                                        };
                                        descriptionContent: {
                                            descriptionText: string;
                                        }[];
                                        consequenceContent: {
                                            consequenceText: string;
                                        }[];
                                        recommendationContent: {
                                            recommendationText: string;
                                        }[];
                                        durationContent?: {
                                            durationText: string;
                                        };
                                        remarkContent: {
                                            remark: string;
                                        }[];
                                        infoLink: {
                                            uri: string;
                                            label?: string[];
                                        }[];
                                    }[];
                                }[];
                            }[];
                        };
                    }[];
                };
            };
            tripInfoResult: {
                previousCall: {
                    stopPointRef: string;
                    stopPointName: {
                        text: string;
                    };
                    nameSuffix?: {
                        text: string;
                    };
                    plannedQuay?: {
                        text: string;
                    };
                    estimatedQuay?: {
                        text: string;
                    };
                    serviceArrival?: {
                        timetabledTime: string;
                        estimatedTime?: string;
                    };
                    serviceDeparture?: {
                        timetabledTime: string;
                        estimatedTime?: string;
                    };
                    expectedDepartureOccupancy?: {
                        /** @enum {string} */
                        fareClass: "unknown" | "firstClass" | "secondClass";
                        /** @enum {string} */
                        occupancyLevel: "empty" | "manySeatsAvailable" | "fewSeatsAvailable" | "standingRoomOnly";
                    }[];
                    order?: number;
                    requestStop?: boolean;
                    unplannedStop?: boolean;
                    notServicedStop?: boolean;
                    noBoardingAtStop?: boolean;
                    noAlightingAtStop?: boolean;
                }[];
                onwardCall: {
                    stopPointRef: string;
                    stopPointName: {
                        text: string;
                    };
                    nameSuffix?: {
                        text: string;
                    };
                    plannedQuay?: {
                        text: string;
                    };
                    estimatedQuay?: {
                        text: string;
                    };
                    serviceArrival?: {
                        timetabledTime: string;
                        estimatedTime?: string;
                    };
                    serviceDeparture?: {
                        timetabledTime: string;
                        estimatedTime?: string;
                    };
                    expectedDepartureOccupancy?: {
                        /** @enum {string} */
                        fareClass: "unknown" | "firstClass" | "secondClass";
                        /** @enum {string} */
                        occupancyLevel: "empty" | "manySeatsAvailable" | "fewSeatsAvailable" | "standingRoomOnly";
                    }[];
                    order?: number;
                    requestStop?: boolean;
                    unplannedStop?: boolean;
                    notServicedStop?: boolean;
                    noBoardingAtStop?: boolean;
                    noAlightingAtStop?: boolean;
                }[];
                service?: {
                    conventionalModeOfOperation?: string;
                    operatingDayRef: string;
                    journeyRef: string;
                    publicCode?: string;
                    lineRef: string;
                    directionRef?: string;
                    mode: {
                        /** @enum {string} */
                        ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                        airSubmode?: string;
                        busSubmode?: string;
                        coachSubmode?: string;
                        funicularSubmode?: string;
                        metroSubmode?: string;
                        tramSubmode?: string;
                        telecabinSubmode?: string;
                        railSubmode?: string;
                        waterSubmode?: string;
                        name?: {
                            text: string;
                        };
                        shortName?: {
                            text: string;
                        };
                    };
                    productCategory?: {
                        name?: {
                            text: string;
                        };
                        shortName?: {
                            text: string;
                        };
                        productCategoryRef?: string;
                    };
                    publishedServiceName: {
                        text: string;
                    };
                    trainNumber?: string;
                    attribute: {
                        userText: {
                            text: string;
                        };
                        code: string;
                    }[];
                    operatorRef?: string;
                    destinationStopPointRef?: string;
                    destinationText?: {
                        text: string;
                    };
                    unplanned?: boolean;
                    cancelled?: boolean;
                    deviation?: boolean;
                    situationFullRefs?: {
                        situationFullRef: {
                            participantRef: string;
                            situationNumber: string;
                        }[];
                    };
                };
                journeyTrack?: {
                    trackSection: {
                        trackSectionStart?: {
                            stopPointRef?: string;
                            stopPlaceRef?: string;
                            geoPosition?: {
                                longitude: number;
                                latitude: number;
                            };
                            name: {
                                text: string;
                            };
                        };
                        trackSectionEnd?: {
                            stopPointRef?: string;
                            stopPlaceRef?: string;
                            geoPosition?: {
                                longitude: number;
                                latitude: number;
                            };
                            name: {
                                text: string;
                            };
                        };
                        linkProjection?: {
                            position: {
                                longitude: number;
                                latitude: number;
                            }[];
                        };
                    }[];
                };
            }[];
        };
        OJP: {
            OJPResponse: {
                serviceDelivery: {
                    responseTimestamp: string;
                    producerRef: string;
                    OJPTripInfoDelivery: {
                        responseTimestamp: string;
                        requestMessageRef?: string;
                        defaultLanguage?: string;
                        calcTime?: string;
                        tripInfoResponseContext?: {
                            places?: {
                                place: {
                                    stopPoint?: {
                                        stopPointRef: string;
                                        stopPointName: {
                                            text: string;
                                        };
                                        parentRef?: string;
                                        plannedQuay?: {
                                            text: string;
                                        };
                                        estimatedQuay?: {
                                            text: string;
                                        };
                                    };
                                    stopPlace?: {
                                        stopPlaceRef?: string;
                                        stopPlaceName?: {
                                            text: string;
                                        };
                                    };
                                    topographicPlace?: {
                                        topographicPlaceCode: string;
                                        topographicPlaceName: {
                                            text: string;
                                        };
                                    };
                                    pointOfInterest?: {
                                        publicCode: string;
                                        name: {
                                            text: string;
                                        };
                                        pointOfInterestCategory: {
                                            osmTag?: {
                                                tag: string;
                                                value: string;
                                            };
                                        }[];
                                        topographicPlaceRef?: string;
                                    };
                                    address?: {
                                        publicCode: string;
                                        name: {
                                            text: string;
                                        };
                                        postCode?: string;
                                        topographicPlaceName?: string;
                                        TopographicPlaceRef?: string;
                                        Street?: string;
                                        HouseNumber?: string;
                                    };
                                    name: {
                                        text: string;
                                    };
                                    geoPosition: {
                                        longitude: number;
                                        latitude: number;
                                    };
                                    mode: {
                                        /** @enum {string} */
                                        ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                                        airSubmode?: string;
                                        busSubmode?: string;
                                        coachSubmode?: string;
                                        funicularSubmode?: string;
                                        metroSubmode?: string;
                                        tramSubmode?: string;
                                        telecabinSubmode?: string;
                                        railSubmode?: string;
                                        waterSubmode?: string;
                                        name?: {
                                            text: string;
                                        };
                                        shortName?: {
                                            text: string;
                                        };
                                    }[];
                                }[];
                            };
                            situations?: {
                                ptSituation: {
                                    creationTime: string;
                                    participantRef?: string;
                                    situationNumber: string;
                                    version?: number;
                                    source: {
                                        /** @enum {string} */
                                        sourceType: "directReport" | "email" | "phone" | "fax" | "post" | "feed" | "radio" | "tv" | "web" | "pager" | "text" | "other";
                                    };
                                    validityPeriod: {
                                        startTime: string;
                                        endTime?: string;
                                    }[];
                                    alertCause: string;
                                    priority?: string;
                                    scopeType?: string;
                                    publishingActions?: {
                                        publishingAction: {
                                            publishAtScope: {
                                                scopeType: string;
                                            };
                                            passengerInformationAction: {
                                                actionRef: string;
                                                recordedAtTime: string;
                                                /** @enum {string} */
                                                perspective: "general" | "stopPoint" | "vehicleJourney";
                                                textualContent: {
                                                    summaryContent: {
                                                        summaryText: string;
                                                    };
                                                    reasonContent?: {
                                                        reasonText: string;
                                                    };
                                                    descriptionContent: {
                                                        descriptionText: string;
                                                    }[];
                                                    consequenceContent: {
                                                        consequenceText: string;
                                                    }[];
                                                    recommendationContent: {
                                                        recommendationText: string;
                                                    }[];
                                                    durationContent?: {
                                                        durationText: string;
                                                    };
                                                    remarkContent: {
                                                        remark: string;
                                                    }[];
                                                    infoLink: {
                                                        uri: string;
                                                        label?: string[];
                                                    }[];
                                                }[];
                                            }[];
                                        }[];
                                    };
                                }[];
                            };
                        };
                        tripInfoResult: {
                            previousCall: {
                                stopPointRef: string;
                                stopPointName: {
                                    text: string;
                                };
                                nameSuffix?: {
                                    text: string;
                                };
                                plannedQuay?: {
                                    text: string;
                                };
                                estimatedQuay?: {
                                    text: string;
                                };
                                serviceArrival?: {
                                    timetabledTime: string;
                                    estimatedTime?: string;
                                };
                                serviceDeparture?: {
                                    timetabledTime: string;
                                    estimatedTime?: string;
                                };
                                expectedDepartureOccupancy?: {
                                    /** @enum {string} */
                                    fareClass: "unknown" | "firstClass" | "secondClass";
                                    /** @enum {string} */
                                    occupancyLevel: "empty" | "manySeatsAvailable" | "fewSeatsAvailable" | "standingRoomOnly";
                                }[];
                                order?: number;
                                requestStop?: boolean;
                                unplannedStop?: boolean;
                                notServicedStop?: boolean;
                                noBoardingAtStop?: boolean;
                                noAlightingAtStop?: boolean;
                            }[];
                            onwardCall: {
                                stopPointRef: string;
                                stopPointName: {
                                    text: string;
                                };
                                nameSuffix?: {
                                    text: string;
                                };
                                plannedQuay?: {
                                    text: string;
                                };
                                estimatedQuay?: {
                                    text: string;
                                };
                                serviceArrival?: {
                                    timetabledTime: string;
                                    estimatedTime?: string;
                                };
                                serviceDeparture?: {
                                    timetabledTime: string;
                                    estimatedTime?: string;
                                };
                                expectedDepartureOccupancy?: {
                                    /** @enum {string} */
                                    fareClass: "unknown" | "firstClass" | "secondClass";
                                    /** @enum {string} */
                                    occupancyLevel: "empty" | "manySeatsAvailable" | "fewSeatsAvailable" | "standingRoomOnly";
                                }[];
                                order?: number;
                                requestStop?: boolean;
                                unplannedStop?: boolean;
                                notServicedStop?: boolean;
                                noBoardingAtStop?: boolean;
                                noAlightingAtStop?: boolean;
                            }[];
                            service?: {
                                conventionalModeOfOperation?: string;
                                operatingDayRef: string;
                                journeyRef: string;
                                publicCode?: string;
                                lineRef: string;
                                directionRef?: string;
                                mode: {
                                    /** @enum {string} */
                                    ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown";
                                    airSubmode?: string;
                                    busSubmode?: string;
                                    coachSubmode?: string;
                                    funicularSubmode?: string;
                                    metroSubmode?: string;
                                    tramSubmode?: string;
                                    telecabinSubmode?: string;
                                    railSubmode?: string;
                                    waterSubmode?: string;
                                    name?: {
                                        text: string;
                                    };
                                    shortName?: {
                                        text: string;
                                    };
                                };
                                productCategory?: {
                                    name?: {
                                        text: string;
                                    };
                                    shortName?: {
                                        text: string;
                                    };
                                    productCategoryRef?: string;
                                };
                                publishedServiceName: {
                                    text: string;
                                };
                                trainNumber?: string;
                                attribute: {
                                    userText: {
                                        text: string;
                                    };
                                    code: string;
                                }[];
                                operatorRef?: string;
                                destinationStopPointRef?: string;
                                destinationText?: {
                                    text: string;
                                };
                                unplanned?: boolean;
                                cancelled?: boolean;
                                deviation?: boolean;
                                situationFullRefs?: {
                                    situationFullRef: {
                                        participantRef: string;
                                        situationNumber: string;
                                    }[];
                                };
                            };
                            journeyTrack?: {
                                trackSection: {
                                    trackSectionStart?: {
                                        stopPointRef?: string;
                                        stopPlaceRef?: string;
                                        geoPosition?: {
                                            longitude: number;
                                            latitude: number;
                                        };
                                        name: {
                                            text: string;
                                        };
                                    };
                                    trackSectionEnd?: {
                                        stopPointRef?: string;
                                        stopPlaceRef?: string;
                                        geoPosition?: {
                                            longitude: number;
                                            latitude: number;
                                        };
                                        name: {
                                            text: string;
                                        };
                                    };
                                    linkProjection?: {
                                        position: {
                                            longitude: number;
                                            latitude: number;
                                        }[];
                                    };
                                }[];
                            };
                        }[];
                    };
                };
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
