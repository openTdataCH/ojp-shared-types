/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ojp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Main /ojp endpoint
         * @description Main /ojp endpoint
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": {
                            OJPRequest: {
                                serviceRequest: {
                                    serviceRequestContext?: {
                                        language?: string;
                                    };
                                    requestTimestamp: string;
                                    requestorRef: string;
                                    OJPTripRequest: {
                                        requestTimestamp: string;
                                        origin: {
                                            placeRef: {
                                                stopPointRef?: string;
                                                stopPlaceRef?: string;
                                                geoPosition?: {
                                                    longitude: number;
                                                    latitude: number;
                                                };
                                                name: {
                                                    text: string;
                                                };
                                            };
                                            depArrTime?: string;
                                        };
                                        destination: {
                                            placeRef: {
                                                stopPointRef?: string;
                                                stopPlaceRef?: string;
                                                geoPosition?: {
                                                    longitude: number;
                                                    latitude: number;
                                                };
                                                name: {
                                                    text: string;
                                                };
                                            };
                                            depArrTime?: string;
                                        };
                                        via: {
                                            viaPoint: {
                                                stopPointRef?: string;
                                                stopPlaceRef?: string;
                                                geoPosition?: {
                                                    longitude: number;
                                                    latitude: number;
                                                };
                                                name: {
                                                    text: string;
                                                };
                                            };
                                            dwellTime?: string;
                                        }[];
                                        params?: {
                                            modeAndModeOfOperationFilter?: {
                                                exclude?: boolean;
                                                ptMode?: ("air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown")[];
                                                airSubmode?: string;
                                                busSubmode?: string;
                                                coachSubmode?: string;
                                                funicularSubmode?: string;
                                                metroSubmode?: string;
                                                tramSubmode?: string;
                                                telecabinSubmode?: string;
                                                railSubmode?: string;
                                                waterSubmode?: string;
                                            }[];
                                            walkSpeed?: number;
                                            numberOfResults?: number;
                                            numberOfResultsBefore?: number;
                                            numberOfResultsAfter?: number;
                                            /** @enum {string} */
                                            useRealtimeData?: "full" | "explanatory" | "none";
                                            includeAllRestrictedLines?: boolean;
                                            includeTrackSections?: boolean;
                                            includeLegProjection?: boolean;
                                            includeTurnDescription?: boolean;
                                            includeIntermediateStops?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TripParam: {
            modeAndModeOfOperationFilter?: {
                exclude?: boolean;
                ptMode?: ("air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown")[];
                airSubmode?: string;
                busSubmode?: string;
                coachSubmode?: string;
                funicularSubmode?: string;
                metroSubmode?: string;
                tramSubmode?: string;
                telecabinSubmode?: string;
                railSubmode?: string;
                waterSubmode?: string;
            }[];
            walkSpeed?: number;
            numberOfResults?: number;
            numberOfResultsBefore?: number;
            numberOfResultsAfter?: number;
            /** @enum {string} */
            useRealtimeData?: "full" | "explanatory" | "none";
            includeAllRestrictedLines?: boolean;
            includeTrackSections?: boolean;
            includeLegProjection?: boolean;
            includeTurnDescription?: boolean;
            includeIntermediateStops?: boolean;
        };
        ViaPoint: {
            viaPoint: {
                stopPointRef?: string;
                stopPlaceRef?: string;
                geoPosition?: {
                    longitude: number;
                    latitude: number;
                };
                name: {
                    text: string;
                };
            };
            dwellTime?: string;
        };
        OJPTripRequest: {
            requestTimestamp: string;
            origin: {
                placeRef: {
                    stopPointRef?: string;
                    stopPlaceRef?: string;
                    geoPosition?: {
                        longitude: number;
                        latitude: number;
                    };
                    name: {
                        text: string;
                    };
                };
                depArrTime?: string;
            };
            destination: {
                placeRef: {
                    stopPointRef?: string;
                    stopPlaceRef?: string;
                    geoPosition?: {
                        longitude: number;
                        latitude: number;
                    };
                    name: {
                        text: string;
                    };
                };
                depArrTime?: string;
            };
            via: {
                viaPoint: {
                    stopPointRef?: string;
                    stopPlaceRef?: string;
                    geoPosition?: {
                        longitude: number;
                        latitude: number;
                    };
                    name: {
                        text: string;
                    };
                };
                dwellTime?: string;
            }[];
            params?: {
                modeAndModeOfOperationFilter?: {
                    exclude?: boolean;
                    ptMode?: ("air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown")[];
                    airSubmode?: string;
                    busSubmode?: string;
                    coachSubmode?: string;
                    funicularSubmode?: string;
                    metroSubmode?: string;
                    tramSubmode?: string;
                    telecabinSubmode?: string;
                    railSubmode?: string;
                    waterSubmode?: string;
                }[];
                walkSpeed?: number;
                numberOfResults?: number;
                numberOfResultsBefore?: number;
                numberOfResultsAfter?: number;
                /** @enum {string} */
                useRealtimeData?: "full" | "explanatory" | "none";
                includeAllRestrictedLines?: boolean;
                includeTrackSections?: boolean;
                includeLegProjection?: boolean;
                includeTurnDescription?: boolean;
                includeIntermediateStops?: boolean;
            };
        };
        OJP: {
            OJPRequest: {
                serviceRequest: {
                    serviceRequestContext?: {
                        language?: string;
                    };
                    requestTimestamp: string;
                    requestorRef: string;
                    OJPTripRequest: {
                        requestTimestamp: string;
                        origin: {
                            placeRef: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                    longitude: number;
                                    latitude: number;
                                };
                                name: {
                                    text: string;
                                };
                            };
                            depArrTime?: string;
                        };
                        destination: {
                            placeRef: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                    longitude: number;
                                    latitude: number;
                                };
                                name: {
                                    text: string;
                                };
                            };
                            depArrTime?: string;
                        };
                        via: {
                            viaPoint: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                    longitude: number;
                                    latitude: number;
                                };
                                name: {
                                    text: string;
                                };
                            };
                            dwellTime?: string;
                        }[];
                        params?: {
                            modeAndModeOfOperationFilter?: {
                                exclude?: boolean;
                                ptMode?: ("air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "telecabin" | "other" | "unknown")[];
                                airSubmode?: string;
                                busSubmode?: string;
                                coachSubmode?: string;
                                funicularSubmode?: string;
                                metroSubmode?: string;
                                tramSubmode?: string;
                                telecabinSubmode?: string;
                                railSubmode?: string;
                                waterSubmode?: string;
                            }[];
                            walkSpeed?: number;
                            numberOfResults?: number;
                            numberOfResultsBefore?: number;
                            numberOfResultsAfter?: number;
                            /** @enum {string} */
                            useRealtimeData?: "full" | "explanatory" | "none";
                            includeAllRestrictedLines?: boolean;
                            includeTrackSections?: boolean;
                            includeLegProjection?: boolean;
                            includeTurnDescription?: boolean;
                            includeIntermediateStops?: boolean;
                        };
                    };
                };
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
