/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ojp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Main /ojp endpoint
         * @description Main /ojp endpoint
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": {
                            OJPRequest: {
                                serviceRequest: {
                                    serviceRequestContext?: {
                                        language?: string;
                                    };
                                    requestTimestamp: string;
                                    requestorRef: string;
                                    OJPStopEventRequest: {
                                        requestTimestamp: string;
                                        location: {
                                            placeRef: {
                                                stopPointRef?: string;
                                                stopPlaceRef?: string;
                                                geoPosition?: {
                                                    longitude: number;
                                                    latitude: number;
                                                };
                                                name: {
                                                    text: string;
                                                };
                                            };
                                            depArrTime?: string;
                                        };
                                        params?: {
                                            includeAllRestrictedLines?: boolean;
                                            numberOfResults?: number;
                                            /** @enum {string} */
                                            stopEventType?: "departure" | "arrival" | "both";
                                            includePreviousCalls?: boolean;
                                            includeOnwardCalls?: boolean;
                                            /** @enum {string} */
                                            useRealtimeData?: "full" | "explanatory" | "none";
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        StopEventParam: {
            includeAllRestrictedLines?: boolean;
            numberOfResults?: number;
            /** @enum {string} */
            stopEventType?: "departure" | "arrival" | "both";
            includePreviousCalls?: boolean;
            includeOnwardCalls?: boolean;
            /** @enum {string} */
            useRealtimeData?: "full" | "explanatory" | "none";
        };
        PlaceContext: {
            placeRef: {
                stopPointRef?: string;
                stopPlaceRef?: string;
                geoPosition?: {
                    longitude: number;
                    latitude: number;
                };
                name: {
                    text: string;
                };
            };
            depArrTime?: string;
        };
        OJPStopEventRequest: {
            requestTimestamp: string;
            location: {
                placeRef: {
                    stopPointRef?: string;
                    stopPlaceRef?: string;
                    geoPosition?: {
                        longitude: number;
                        latitude: number;
                    };
                    name: {
                        text: string;
                    };
                };
                depArrTime?: string;
            };
            params?: {
                includeAllRestrictedLines?: boolean;
                numberOfResults?: number;
                /** @enum {string} */
                stopEventType?: "departure" | "arrival" | "both";
                includePreviousCalls?: boolean;
                includeOnwardCalls?: boolean;
                /** @enum {string} */
                useRealtimeData?: "full" | "explanatory" | "none";
            };
        };
        OJP: {
            OJPRequest: {
                serviceRequest: {
                    serviceRequestContext?: {
                        language?: string;
                    };
                    requestTimestamp: string;
                    requestorRef: string;
                    OJPStopEventRequest: {
                        requestTimestamp: string;
                        location: {
                            placeRef: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                    longitude: number;
                                    latitude: number;
                                };
                                name: {
                                    text: string;
                                };
                            };
                            depArrTime?: string;
                        };
                        params?: {
                            includeAllRestrictedLines?: boolean;
                            numberOfResults?: number;
                            /** @enum {string} */
                            stopEventType?: "departure" | "arrival" | "both";
                            includePreviousCalls?: boolean;
                            includeOnwardCalls?: boolean;
                            /** @enum {string} */
                            useRealtimeData?: "full" | "explanatory" | "none";
                        };
                    };
                };
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
