/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ojp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Main /ojp endpoint
         * @description Main /ojp endpoint
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/xml": {
                            OJPResponse: {
                                serviceDelivery: {
                                    responseTimestamp: string;
                                    producerRef: string;
                                    OJPTripRefineDelivery?: {
                                        responseTimestamp: string;
                                        requestMessageRef?: string;
                                        defaultLanguage?: string;
                                        calcTime?: string;
                                        tripResult: {
                                            id: string;
                                            trip: {
                                                id: string;
                                                duration: string;
                                                /** Format: date-time */
                                                startTime: string;
                                                /** Format: date-time */
                                                endTime: string;
                                                transfers: number;
                                                leg: {
                                                    id: string;
                                                    duration?: string;
                                                    timedLeg?: {
                                                        legBoard: {
                                                            stopPointRef: string;
                                                            stopPointName: {
                                                                text: string;
                                                            };
                                                            nameSuffix?: {
                                                                text: string;
                                                            };
                                                            plannedQuay?: {
                                                                text: string;
                                                            };
                                                            estimatedQuay?: {
                                                                text: string;
                                                            };
                                                            serviceArrival?: {
                                                                timetabledTime: string;
                                                                estimatedTime?: string;
                                                            };
                                                            serviceDeparture: {
                                                                timetabledTime: string;
                                                                estimatedTime?: string;
                                                            };
                                                            order?: number;
                                                            requestStop?: boolean;
                                                            unplannedStop?: boolean;
                                                            notServicedStop?: boolean;
                                                            noBoardingAtStop?: boolean;
                                                            noAlightingAtStop?: boolean;
                                                        };
                                                        legIntermediate: {
                                                            stopPointRef: string;
                                                            stopPointName: {
                                                                text: string;
                                                            };
                                                            nameSuffix?: {
                                                                text: string;
                                                            };
                                                            plannedQuay?: {
                                                                text: string;
                                                            };
                                                            estimatedQuay?: {
                                                                text: string;
                                                            };
                                                            serviceArrival: {
                                                                timetabledTime: string;
                                                                estimatedTime?: string;
                                                            };
                                                            serviceDeparture: {
                                                                timetabledTime: string;
                                                                estimatedTime?: string;
                                                            };
                                                            order?: number;
                                                            requestStop?: boolean;
                                                            unplannedStop?: boolean;
                                                            notServicedStop?: boolean;
                                                            noBoardingAtStop?: boolean;
                                                            noAlightingAtStop?: boolean;
                                                        }[];
                                                        legAlight: {
                                                            stopPointRef: string;
                                                            stopPointName: {
                                                                text: string;
                                                            };
                                                            nameSuffix?: {
                                                                text: string;
                                                            };
                                                            plannedQuay?: {
                                                                text: string;
                                                            };
                                                            estimatedQuay?: {
                                                                text: string;
                                                            };
                                                            serviceArrival: {
                                                                timetabledTime: string;
                                                                estimatedTime?: string;
                                                            };
                                                            serviceDeparture?: {
                                                                timetabledTime: string;
                                                                estimatedTime?: string;
                                                            };
                                                            order?: number;
                                                            requestStop?: boolean;
                                                            unplannedStop?: boolean;
                                                            notServicedStop?: boolean;
                                                            noBoardingAtStop?: boolean;
                                                            noAlightingAtStop?: boolean;
                                                        };
                                                        service: {
                                                            conventionalModeOfOperation?: string;
                                                            operatingDayRef: string;
                                                            journeyRef: string;
                                                            publicCode?: string;
                                                            lineRef: string;
                                                            directionRef?: string;
                                                            mode: {
                                                                /** @enum {string} */
                                                                ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "other" | "unknown";
                                                                airSubmode?: string;
                                                                busSubmode?: string;
                                                                coachSubmode?: string;
                                                                funicularSubmode?: string;
                                                                metroSubmode?: string;
                                                                tramSubmode?: string;
                                                                telecabinSubmode?: string;
                                                                railSubmode?: string;
                                                                waterSubmode?: string;
                                                                name?: {
                                                                    text: string;
                                                                };
                                                                shortName?: {
                                                                    text: string;
                                                                };
                                                            };
                                                            productCategory?: {
                                                                name?: {
                                                                    text: string;
                                                                };
                                                                shortName?: {
                                                                    text: string;
                                                                };
                                                                productCategoryRef?: string;
                                                            };
                                                            publishedServiceName: {
                                                                text: string;
                                                            };
                                                            trainNumber?: string;
                                                            attribute: {
                                                                userText: {
                                                                    text: string;
                                                                };
                                                                code: string;
                                                            }[];
                                                            operatorRef?: string;
                                                            destinationStopPointRef?: string;
                                                            destinationText?: {
                                                                text: string;
                                                            };
                                                            situationFullRefs?: {
                                                                participantRef: string;
                                                                situationNumber: string;
                                                            }[];
                                                            unplanned?: boolean;
                                                            cancelled?: boolean;
                                                            deviation?: boolean;
                                                        };
                                                        legTrack?: {
                                                            trackSection: {
                                                                trackSectionStart?: {
                                                                    stopPointRef?: string;
                                                                    stopPlaceRef?: string;
                                                                    geoPosition?: {
                                                                        longitude: number;
                                                                        latitude: number;
                                                                    };
                                                                    name: {
                                                                        text: string;
                                                                    };
                                                                };
                                                                trackSectionEnd?: {
                                                                    stopPointRef?: string;
                                                                    stopPlaceRef?: string;
                                                                    geoPosition?: {
                                                                        longitude: number;
                                                                        latitude: number;
                                                                    };
                                                                    name: {
                                                                        text: string;
                                                                    };
                                                                };
                                                                linkProjection?: {
                                                                    position: {
                                                                        longitude: number;
                                                                        latitude: number;
                                                                    }[];
                                                                };
                                                            };
                                                        };
                                                    };
                                                    transferLeg?: {
                                                        /** @enum {string} */
                                                        transferType: "walk" | "remainInVehicle";
                                                        legStart: {
                                                            stopPointRef?: string;
                                                            stopPlaceRef?: string;
                                                            geoPosition?: {
                                                                longitude: number;
                                                                latitude: number;
                                                            };
                                                            name: {
                                                                text: string;
                                                            };
                                                        };
                                                        legEnd: {
                                                            stopPointRef?: string;
                                                            stopPlaceRef?: string;
                                                            geoPosition?: {
                                                                longitude: number;
                                                                latitude: number;
                                                            };
                                                            name: {
                                                                text: string;
                                                            };
                                                        };
                                                        duration: string;
                                                    };
                                                    continuousLeg?: {
                                                        legStart: {
                                                            stopPointRef?: string;
                                                            stopPlaceRef?: string;
                                                            geoPosition?: {
                                                                longitude: number;
                                                                latitude: number;
                                                            };
                                                            name: {
                                                                text: string;
                                                            };
                                                        };
                                                        legEnd: {
                                                            stopPointRef?: string;
                                                            stopPlaceRef?: string;
                                                            geoPosition?: {
                                                                longitude: number;
                                                                latitude: number;
                                                            };
                                                            name: {
                                                                text: string;
                                                            };
                                                        };
                                                        service: {
                                                            personalModeOfOperation?: string;
                                                            personalMode?: string;
                                                        };
                                                        duration: string;
                                                    };
                                                }[];
                                                unplanned?: boolean;
                                                cancelled?: boolean;
                                                deviation?: boolean;
                                                delayed?: boolean;
                                                infeasible?: boolean;
                                            };
                                        }[];
                                    };
                                };
                            };
                        };
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        OJPTripRefineDelivery: {
            responseTimestamp: string;
            requestMessageRef?: string;
            defaultLanguage?: string;
            calcTime?: string;
            tripResult: {
                id: string;
                trip: {
                    id: string;
                    duration: string;
                    /** Format: date-time */
                    startTime: string;
                    /** Format: date-time */
                    endTime: string;
                    transfers: number;
                    leg: {
                        id: string;
                        duration?: string;
                        timedLeg?: {
                            legBoard: {
                                stopPointRef: string;
                                stopPointName: {
                                    text: string;
                                };
                                nameSuffix?: {
                                    text: string;
                                };
                                plannedQuay?: {
                                    text: string;
                                };
                                estimatedQuay?: {
                                    text: string;
                                };
                                serviceArrival?: {
                                    timetabledTime: string;
                                    estimatedTime?: string;
                                };
                                serviceDeparture: {
                                    timetabledTime: string;
                                    estimatedTime?: string;
                                };
                                order?: number;
                                requestStop?: boolean;
                                unplannedStop?: boolean;
                                notServicedStop?: boolean;
                                noBoardingAtStop?: boolean;
                                noAlightingAtStop?: boolean;
                            };
                            legIntermediate: {
                                stopPointRef: string;
                                stopPointName: {
                                    text: string;
                                };
                                nameSuffix?: {
                                    text: string;
                                };
                                plannedQuay?: {
                                    text: string;
                                };
                                estimatedQuay?: {
                                    text: string;
                                };
                                serviceArrival: {
                                    timetabledTime: string;
                                    estimatedTime?: string;
                                };
                                serviceDeparture: {
                                    timetabledTime: string;
                                    estimatedTime?: string;
                                };
                                order?: number;
                                requestStop?: boolean;
                                unplannedStop?: boolean;
                                notServicedStop?: boolean;
                                noBoardingAtStop?: boolean;
                                noAlightingAtStop?: boolean;
                            }[];
                            legAlight: {
                                stopPointRef: string;
                                stopPointName: {
                                    text: string;
                                };
                                nameSuffix?: {
                                    text: string;
                                };
                                plannedQuay?: {
                                    text: string;
                                };
                                estimatedQuay?: {
                                    text: string;
                                };
                                serviceArrival: {
                                    timetabledTime: string;
                                    estimatedTime?: string;
                                };
                                serviceDeparture?: {
                                    timetabledTime: string;
                                    estimatedTime?: string;
                                };
                                order?: number;
                                requestStop?: boolean;
                                unplannedStop?: boolean;
                                notServicedStop?: boolean;
                                noBoardingAtStop?: boolean;
                                noAlightingAtStop?: boolean;
                            };
                            service: {
                                conventionalModeOfOperation?: string;
                                operatingDayRef: string;
                                journeyRef: string;
                                publicCode?: string;
                                lineRef: string;
                                directionRef?: string;
                                mode: {
                                    /** @enum {string} */
                                    ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "other" | "unknown";
                                    airSubmode?: string;
                                    busSubmode?: string;
                                    coachSubmode?: string;
                                    funicularSubmode?: string;
                                    metroSubmode?: string;
                                    tramSubmode?: string;
                                    telecabinSubmode?: string;
                                    railSubmode?: string;
                                    waterSubmode?: string;
                                    name?: {
                                        text: string;
                                    };
                                    shortName?: {
                                        text: string;
                                    };
                                };
                                productCategory?: {
                                    name?: {
                                        text: string;
                                    };
                                    shortName?: {
                                        text: string;
                                    };
                                    productCategoryRef?: string;
                                };
                                publishedServiceName: {
                                    text: string;
                                };
                                trainNumber?: string;
                                attribute: {
                                    userText: {
                                        text: string;
                                    };
                                    code: string;
                                }[];
                                operatorRef?: string;
                                destinationStopPointRef?: string;
                                destinationText?: {
                                    text: string;
                                };
                                situationFullRefs?: {
                                    participantRef: string;
                                    situationNumber: string;
                                }[];
                                unplanned?: boolean;
                                cancelled?: boolean;
                                deviation?: boolean;
                            };
                            legTrack?: {
                                trackSection: {
                                    trackSectionStart?: {
                                        stopPointRef?: string;
                                        stopPlaceRef?: string;
                                        geoPosition?: {
                                            longitude: number;
                                            latitude: number;
                                        };
                                        name: {
                                            text: string;
                                        };
                                    };
                                    trackSectionEnd?: {
                                        stopPointRef?: string;
                                        stopPlaceRef?: string;
                                        geoPosition?: {
                                            longitude: number;
                                            latitude: number;
                                        };
                                        name: {
                                            text: string;
                                        };
                                    };
                                    linkProjection?: {
                                        position: {
                                            longitude: number;
                                            latitude: number;
                                        }[];
                                    };
                                };
                            };
                        };
                        transferLeg?: {
                            /** @enum {string} */
                            transferType: "walk" | "remainInVehicle";
                            legStart: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                    longitude: number;
                                    latitude: number;
                                };
                                name: {
                                    text: string;
                                };
                            };
                            legEnd: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                    longitude: number;
                                    latitude: number;
                                };
                                name: {
                                    text: string;
                                };
                            };
                            duration: string;
                        };
                        continuousLeg?: {
                            legStart: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                    longitude: number;
                                    latitude: number;
                                };
                                name: {
                                    text: string;
                                };
                            };
                            legEnd: {
                                stopPointRef?: string;
                                stopPlaceRef?: string;
                                geoPosition?: {
                                    longitude: number;
                                    latitude: number;
                                };
                                name: {
                                    text: string;
                                };
                            };
                            service: {
                                personalModeOfOperation?: string;
                                personalMode?: string;
                            };
                            duration: string;
                        };
                    }[];
                    unplanned?: boolean;
                    cancelled?: boolean;
                    deviation?: boolean;
                    delayed?: boolean;
                    infeasible?: boolean;
                };
            }[];
        };
        OJP: {
            OJPResponse: {
                serviceDelivery: {
                    responseTimestamp: string;
                    producerRef: string;
                    OJPTripRefineDelivery?: {
                        responseTimestamp: string;
                        requestMessageRef?: string;
                        defaultLanguage?: string;
                        calcTime?: string;
                        tripResult: {
                            id: string;
                            trip: {
                                id: string;
                                duration: string;
                                /** Format: date-time */
                                startTime: string;
                                /** Format: date-time */
                                endTime: string;
                                transfers: number;
                                leg: {
                                    id: string;
                                    duration?: string;
                                    timedLeg?: {
                                        legBoard: {
                                            stopPointRef: string;
                                            stopPointName: {
                                                text: string;
                                            };
                                            nameSuffix?: {
                                                text: string;
                                            };
                                            plannedQuay?: {
                                                text: string;
                                            };
                                            estimatedQuay?: {
                                                text: string;
                                            };
                                            serviceArrival?: {
                                                timetabledTime: string;
                                                estimatedTime?: string;
                                            };
                                            serviceDeparture: {
                                                timetabledTime: string;
                                                estimatedTime?: string;
                                            };
                                            order?: number;
                                            requestStop?: boolean;
                                            unplannedStop?: boolean;
                                            notServicedStop?: boolean;
                                            noBoardingAtStop?: boolean;
                                            noAlightingAtStop?: boolean;
                                        };
                                        legIntermediate: {
                                            stopPointRef: string;
                                            stopPointName: {
                                                text: string;
                                            };
                                            nameSuffix?: {
                                                text: string;
                                            };
                                            plannedQuay?: {
                                                text: string;
                                            };
                                            estimatedQuay?: {
                                                text: string;
                                            };
                                            serviceArrival: {
                                                timetabledTime: string;
                                                estimatedTime?: string;
                                            };
                                            serviceDeparture: {
                                                timetabledTime: string;
                                                estimatedTime?: string;
                                            };
                                            order?: number;
                                            requestStop?: boolean;
                                            unplannedStop?: boolean;
                                            notServicedStop?: boolean;
                                            noBoardingAtStop?: boolean;
                                            noAlightingAtStop?: boolean;
                                        }[];
                                        legAlight: {
                                            stopPointRef: string;
                                            stopPointName: {
                                                text: string;
                                            };
                                            nameSuffix?: {
                                                text: string;
                                            };
                                            plannedQuay?: {
                                                text: string;
                                            };
                                            estimatedQuay?: {
                                                text: string;
                                            };
                                            serviceArrival: {
                                                timetabledTime: string;
                                                estimatedTime?: string;
                                            };
                                            serviceDeparture?: {
                                                timetabledTime: string;
                                                estimatedTime?: string;
                                            };
                                            order?: number;
                                            requestStop?: boolean;
                                            unplannedStop?: boolean;
                                            notServicedStop?: boolean;
                                            noBoardingAtStop?: boolean;
                                            noAlightingAtStop?: boolean;
                                        };
                                        service: {
                                            conventionalModeOfOperation?: string;
                                            operatingDayRef: string;
                                            journeyRef: string;
                                            publicCode?: string;
                                            lineRef: string;
                                            directionRef?: string;
                                            mode: {
                                                /** @enum {string} */
                                                ptMode: "air" | "bus" | "coach" | "trolleyBus" | "metro" | "rail" | "tram" | "water" | "ferry" | "cableway" | "funicular" | "lift" | "other" | "unknown";
                                                airSubmode?: string;
                                                busSubmode?: string;
                                                coachSubmode?: string;
                                                funicularSubmode?: string;
                                                metroSubmode?: string;
                                                tramSubmode?: string;
                                                telecabinSubmode?: string;
                                                railSubmode?: string;
                                                waterSubmode?: string;
                                                name?: {
                                                    text: string;
                                                };
                                                shortName?: {
                                                    text: string;
                                                };
                                            };
                                            productCategory?: {
                                                name?: {
                                                    text: string;
                                                };
                                                shortName?: {
                                                    text: string;
                                                };
                                                productCategoryRef?: string;
                                            };
                                            publishedServiceName: {
                                                text: string;
                                            };
                                            trainNumber?: string;
                                            attribute: {
                                                userText: {
                                                    text: string;
                                                };
                                                code: string;
                                            }[];
                                            operatorRef?: string;
                                            destinationStopPointRef?: string;
                                            destinationText?: {
                                                text: string;
                                            };
                                            situationFullRefs?: {
                                                participantRef: string;
                                                situationNumber: string;
                                            }[];
                                            unplanned?: boolean;
                                            cancelled?: boolean;
                                            deviation?: boolean;
                                        };
                                        legTrack?: {
                                            trackSection: {
                                                trackSectionStart?: {
                                                    stopPointRef?: string;
                                                    stopPlaceRef?: string;
                                                    geoPosition?: {
                                                        longitude: number;
                                                        latitude: number;
                                                    };
                                                    name: {
                                                        text: string;
                                                    };
                                                };
                                                trackSectionEnd?: {
                                                    stopPointRef?: string;
                                                    stopPlaceRef?: string;
                                                    geoPosition?: {
                                                        longitude: number;
                                                        latitude: number;
                                                    };
                                                    name: {
                                                        text: string;
                                                    };
                                                };
                                                linkProjection?: {
                                                    position: {
                                                        longitude: number;
                                                        latitude: number;
                                                    }[];
                                                };
                                            };
                                        };
                                    };
                                    transferLeg?: {
                                        /** @enum {string} */
                                        transferType: "walk" | "remainInVehicle";
                                        legStart: {
                                            stopPointRef?: string;
                                            stopPlaceRef?: string;
                                            geoPosition?: {
                                                longitude: number;
                                                latitude: number;
                                            };
                                            name: {
                                                text: string;
                                            };
                                        };
                                        legEnd: {
                                            stopPointRef?: string;
                                            stopPlaceRef?: string;
                                            geoPosition?: {
                                                longitude: number;
                                                latitude: number;
                                            };
                                            name: {
                                                text: string;
                                            };
                                        };
                                        duration: string;
                                    };
                                    continuousLeg?: {
                                        legStart: {
                                            stopPointRef?: string;
                                            stopPlaceRef?: string;
                                            geoPosition?: {
                                                longitude: number;
                                                latitude: number;
                                            };
                                            name: {
                                                text: string;
                                            };
                                        };
                                        legEnd: {
                                            stopPointRef?: string;
                                            stopPlaceRef?: string;
                                            geoPosition?: {
                                                longitude: number;
                                                latitude: number;
                                            };
                                            name: {
                                                text: string;
                                            };
                                        };
                                        service: {
                                            personalModeOfOperation?: string;
                                            personalMode?: string;
                                        };
                                        duration: string;
                                    };
                                }[];
                                unplanned?: boolean;
                                cancelled?: boolean;
                                deviation?: boolean;
                                delayed?: boolean;
                                infeasible?: boolean;
                            };
                        }[];
                    };
                };
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
